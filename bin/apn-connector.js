// Generated by CoffeeScript 1.7.1
(function() {
  var AccountModel, Accounts, Schema, agent, apnagent, app, bodyParser, express, fs, https, join, mongoose, options, pfx, users;

  express = require('express');

  https = require('https');

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  fs = require('fs');

  bodyParser = require('body-parser');

  join = require('path').join;

  pfx = join(__dirname, '../_certs/pfx.p12');

  apnagent = require('apnagent');

  agent = module.exports = new apnagent.Agent();

  agent.set('pfx file', pfx);

  agent.enable('sandbox');

  users = mongoose.connect('mongodb://localhost/users');

  Accounts = new Schema({
    phone: {
      type: String,
      required: true,
      unique: true
    },
    token: {
      type: String,
      required: true
    }
  });

  AccountModel = mongoose.model('Account', Accounts);

  options = {
    key: fs.readFileSync('../keys/privatekey.pem'),
    cert: fs.readFileSync('../keys/certificate.pem')
  };

  app = express();

  app.use(bodyParser());

  app.post('/regist_apn', function(req, res) {
    var Account, phone, token;
    phone = req.body.phone;
    token = req.body.token;
    Account = mongoose.model('Account');
    return Account.findOne({
      'phone': phone
    }, function(err, account) {
      if (err) {
        return console.log(err.toString());
      }
      if (!account) {
        console.log("No such account exist");
        account = new Account();
        account.phone = phone;
        account.token = token;
        return account.save(function(err) {
          if (err) {
            return console.log(err.toString());
          }
        });
      } else {
        return account.update({
          "token": token
        }, function(err) {
          if (err) {
            return console.log(err.toString());
          }
        });
      }
    });
  });

  app.post('/send_apn', function(req, res) {
    var Account, phone, token;
    phone = req.body.phone;
    token = req.body.token;
    Account = mongoose.model('Account');
    return Account.findOne({
      'phone': phone
    }, function(err, account) {
      if (err) {
        return console.log(err.toString());
      }
      if (!account) {

      }
    });
  });

  agent.connect(function(err) {
    var env;
    if ((err & amp, err.name === 'GatewayAuthorizationError')) {
      console.log('Authentication Error: %s', err.message);
      process.exit(1);
    } else if (err) {
      throw err;
    }
    env = agent.enabled('sandbox') ? 'sandbox' : 'production';
    return console.log('apnagent [%s] gateway connected', env);
  });

  https.createServer(options, app).listen(8000);

  console.log('Listening Https at 8000');

}).call(this);
